{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"---\n\n## <center>EDA for VIDEO GAME SALES üéÆ</center>\n\n---\n\n> <center><img src=\"https://giffiles.alphacoders.com/186/18611.gif\"></center>\n\n---","metadata":{"id":"J9kSPL7UaAy-","_kg_hide-input":false,"_kg_hide-output":false}},{"cell_type":"markdown","source":"\n## <p style=\"background-color:peach; font-family:newtimeroman; font-size:120%; text-align:center; border-radius: 15px 50px;\">Table of Content</p>\n\n* [1. Importing Libraries & Data üìö](#1)\n    * [1.1 Importing Libraries](#1.1)\n    * [1.2 Importing Data](#1.2)\n* [2. Understanding the Data üîé](#2)\n    * [2.1 Summary of Data](#2.1)\n    * [2.1 Summary of Data](#2.2)\n* [3. Data Cleaning and Optimization üìù](#3)\n    * [3.1 Cleaning Data](#3.1)\n    * [3.1 Summary of Data](#3.2)\n* [4. Descriptive Analysis üì∏](#4)\n    * [4.1 Frequency Distribution](#4.1)\n    * [4.2 Central Tendancy](#4.2)\n    * [4.3 Separating Measures](#4.3)\n    * [4.4 Dispersion Measures](#4.4)\n* [5. Exploratory Data Analysis üìà ](#5)\n    * [5.1 Publisher-Wise](#5.1)\n    * [5.2 Platform-Wise](#5.2)\n    * [5.3 Genre-Wise](#5.3)\n    * [5.4 Region-Wise](#5.4)\n    \n\n\n\n","metadata":{"id":"SMBLjAEYaAzG","_kg_hide-input":false}},{"cell_type":"markdown","source":"<a id=\"1\"></a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">1. Importing Data & Libraries üìö</p>\n","metadata":{"id":"SmnazMkqaAzI"}},{"cell_type":"markdown","source":"\n<a id=\"1.1\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">1.1 Importing Libraries </p>\n\n","metadata":{"id":"43ey8YE9CMvn"}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nimport missingno as mn\n\n# Visualization Packages Importing\nfrom plotly import express as px\nfrom plotly import graph_objects as go\nfrom plotly.subplots import make_subplots ","metadata":{"id":"R9UpEczxaAzJ","_kg_hide-input":false,"execution":{"iopub.status.busy":"2023-03-19T13:53:20.510627Z","iopub.execute_input":"2023-03-19T13:53:20.511092Z","iopub.status.idle":"2023-03-19T13:53:20.517141Z","shell.execute_reply.started":"2023-03-19T13:53:20.511046Z","shell.execute_reply":"2023-03-19T13:53:20.516157Z"},"trusted":true},"execution_count":397,"outputs":[]},{"cell_type":"markdown","source":"\n<a id=\"1.2\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">1.2 Importing Data  </p>\n","metadata":{"id":"E9V7yW39EXKD"}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/videogamesales/vgsales.csv')","metadata":{"id":"63v4Jxl-aAzM","execution":{"iopub.status.busy":"2023-03-19T13:53:20.518738Z","iopub.execute_input":"2023-03-19T13:53:20.519589Z","iopub.status.idle":"2023-03-19T13:53:20.562316Z","shell.execute_reply.started":"2023-03-19T13:53:20.519558Z","shell.execute_reply":"2023-03-19T13:53:20.561074Z"},"trusted":true},"execution_count":398,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"id":"yYtEvX84aAzN","outputId":"7917d88d-5eb7-49c5-b2fd-a400a5bf5e6b","execution":{"iopub.status.busy":"2023-03-19T13:53:20.564203Z","iopub.execute_input":"2023-03-19T13:53:20.564508Z","iopub.status.idle":"2023-03-19T13:53:20.581657Z","shell.execute_reply.started":"2023-03-19T13:53:20.564479Z","shell.execute_reply":"2023-03-19T13:53:20.580142Z"},"trusted":true},"execution_count":399,"outputs":[{"execution_count":399,"output_type":"execute_result","data":{"text/plain":"   Rank                      Name Platform    Year         Genre Publisher  \\\n0     1                Wii Sports      Wii  2006.0        Sports  Nintendo   \n1     2         Super Mario Bros.      NES  1985.0      Platform  Nintendo   \n2     3            Mario Kart Wii      Wii  2008.0        Racing  Nintendo   \n3     4         Wii Sports Resort      Wii  2009.0        Sports  Nintendo   \n4     5  Pokemon Red/Pokemon Blue       GB  1996.0  Role-Playing  Nintendo   \n\n   NA_Sales  EU_Sales  JP_Sales  Other_Sales  Global_Sales  \n0     41.49     29.02      3.77         8.46         82.74  \n1     29.08      3.58      6.81         0.77         40.24  \n2     15.85     12.88      3.79         3.31         35.82  \n3     15.75     11.01      3.28         2.96         33.00  \n4     11.27      8.89     10.22         1.00         31.37  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rank</th>\n      <th>Name</th>\n      <th>Platform</th>\n      <th>Year</th>\n      <th>Genre</th>\n      <th>Publisher</th>\n      <th>NA_Sales</th>\n      <th>EU_Sales</th>\n      <th>JP_Sales</th>\n      <th>Other_Sales</th>\n      <th>Global_Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Wii Sports</td>\n      <td>Wii</td>\n      <td>2006.0</td>\n      <td>Sports</td>\n      <td>Nintendo</td>\n      <td>41.49</td>\n      <td>29.02</td>\n      <td>3.77</td>\n      <td>8.46</td>\n      <td>82.74</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Super Mario Bros.</td>\n      <td>NES</td>\n      <td>1985.0</td>\n      <td>Platform</td>\n      <td>Nintendo</td>\n      <td>29.08</td>\n      <td>3.58</td>\n      <td>6.81</td>\n      <td>0.77</td>\n      <td>40.24</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Mario Kart Wii</td>\n      <td>Wii</td>\n      <td>2008.0</td>\n      <td>Racing</td>\n      <td>Nintendo</td>\n      <td>15.85</td>\n      <td>12.88</td>\n      <td>3.79</td>\n      <td>3.31</td>\n      <td>35.82</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Wii Sports Resort</td>\n      <td>Wii</td>\n      <td>2009.0</td>\n      <td>Sports</td>\n      <td>Nintendo</td>\n      <td>15.75</td>\n      <td>11.01</td>\n      <td>3.28</td>\n      <td>2.96</td>\n      <td>33.00</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Pokemon Red/Pokemon Blue</td>\n      <td>GB</td>\n      <td>1996.0</td>\n      <td>Role-Playing</td>\n      <td>Nintendo</td>\n      <td>11.27</td>\n      <td>8.89</td>\n      <td>10.22</td>\n      <td>1.00</td>\n      <td>31.37</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"\n<a id=\"1\"></a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">2. Understanding the data üìö</p>\n","metadata":{"id":"514BEn3jaAzO"}},{"cell_type":"markdown","source":"\n\n<a id=\"2.1\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">2.1 Summary of data   </p>\n\n","metadata":{"id":"rmDVNmlBaAzP"}},{"cell_type":"code","source":"df.info()","metadata":{"id":"oquiVL0DaAzQ","outputId":"759b0678-d30b-4713-8648-f652ea0c491c","execution":{"iopub.status.busy":"2023-03-19T13:53:20.583138Z","iopub.execute_input":"2023-03-19T13:53:20.583446Z","iopub.status.idle":"2023-03-19T13:53:20.602898Z","shell.execute_reply.started":"2023-03-19T13:53:20.583415Z","shell.execute_reply":"2023-03-19T13:53:20.601684Z"},"trusted":true},"execution_count":400,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 16598 entries, 0 to 16597\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   Rank          16598 non-null  int64  \n 1   Name          16598 non-null  object \n 2   Platform      16598 non-null  object \n 3   Year          16327 non-null  float64\n 4   Genre         16598 non-null  object \n 5   Publisher     16540 non-null  object \n 6   NA_Sales      16598 non-null  float64\n 7   EU_Sales      16598 non-null  float64\n 8   JP_Sales      16598 non-null  float64\n 9   Other_Sales   16598 non-null  float64\n 10  Global_Sales  16598 non-null  float64\ndtypes: float64(6), int64(1), object(4)\nmemory usage: 1.4+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.describe()","metadata":{"id":"RGjzY-Y7aAzQ","outputId":"7fb9af6c-4314-4024-dfe7-9ad1d5e959c6","execution":{"iopub.status.busy":"2023-03-19T13:53:20.605507Z","iopub.execute_input":"2023-03-19T13:53:20.605858Z","iopub.status.idle":"2023-03-19T13:53:20.648052Z","shell.execute_reply.started":"2023-03-19T13:53:20.605822Z","shell.execute_reply":"2023-03-19T13:53:20.646505Z"},"trusted":true},"execution_count":401,"outputs":[{"execution_count":401,"output_type":"execute_result","data":{"text/plain":"               Rank          Year      NA_Sales      EU_Sales      JP_Sales  \\\ncount  16598.000000  16327.000000  16598.000000  16598.000000  16598.000000   \nmean    8300.605254   2006.406443      0.264667      0.146652      0.077782   \nstd     4791.853933      5.828981      0.816683      0.505351      0.309291   \nmin        1.000000   1980.000000      0.000000      0.000000      0.000000   \n25%     4151.250000   2003.000000      0.000000      0.000000      0.000000   \n50%     8300.500000   2007.000000      0.080000      0.020000      0.000000   \n75%    12449.750000   2010.000000      0.240000      0.110000      0.040000   \nmax    16600.000000   2020.000000     41.490000     29.020000     10.220000   \n\n        Other_Sales  Global_Sales  \ncount  16598.000000  16598.000000  \nmean       0.048063      0.537441  \nstd        0.188588      1.555028  \nmin        0.000000      0.010000  \n25%        0.000000      0.060000  \n50%        0.010000      0.170000  \n75%        0.040000      0.470000  \nmax       10.570000     82.740000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rank</th>\n      <th>Year</th>\n      <th>NA_Sales</th>\n      <th>EU_Sales</th>\n      <th>JP_Sales</th>\n      <th>Other_Sales</th>\n      <th>Global_Sales</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>16598.000000</td>\n      <td>16327.000000</td>\n      <td>16598.000000</td>\n      <td>16598.000000</td>\n      <td>16598.000000</td>\n      <td>16598.000000</td>\n      <td>16598.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>8300.605254</td>\n      <td>2006.406443</td>\n      <td>0.264667</td>\n      <td>0.146652</td>\n      <td>0.077782</td>\n      <td>0.048063</td>\n      <td>0.537441</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4791.853933</td>\n      <td>5.828981</td>\n      <td>0.816683</td>\n      <td>0.505351</td>\n      <td>0.309291</td>\n      <td>0.188588</td>\n      <td>1.555028</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1980.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.010000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>4151.250000</td>\n      <td>2003.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.060000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>8300.500000</td>\n      <td>2007.000000</td>\n      <td>0.080000</td>\n      <td>0.020000</td>\n      <td>0.000000</td>\n      <td>0.010000</td>\n      <td>0.170000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>12449.750000</td>\n      <td>2010.000000</td>\n      <td>0.240000</td>\n      <td>0.110000</td>\n      <td>0.040000</td>\n      <td>0.040000</td>\n      <td>0.470000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>16600.000000</td>\n      <td>2020.000000</td>\n      <td>41.490000</td>\n      <td>29.020000</td>\n      <td>10.220000</td>\n      <td>10.570000</td>\n      <td>82.740000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"id":"9Vp6TSeZaAzR","outputId":"b4126462-1179-4090-f56e-50c865f85492","execution":{"iopub.status.busy":"2023-03-19T13:53:20.649649Z","iopub.execute_input":"2023-03-19T13:53:20.649961Z","iopub.status.idle":"2023-03-19T13:53:20.658081Z","shell.execute_reply.started":"2023-03-19T13:53:20.649930Z","shell.execute_reply":"2023-03-19T13:53:20.656565Z"},"trusted":true},"execution_count":402,"outputs":[{"execution_count":402,"output_type":"execute_result","data":{"text/plain":"(16598, 11)"},"metadata":{}}]},{"cell_type":"markdown","source":"\n\n<a id=\"2.2\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">2.2 Missing values    </p>\n\n","metadata":{"id":"hMEMdJ4eaAzR"}},{"cell_type":"code","source":"mn.matrix(df)","metadata":{"id":"OjwjXaA0aAzS","outputId":"642714bd-9ba0-41c8-c33b-a82a6c5003d1","execution":{"iopub.status.busy":"2023-03-19T13:53:20.659868Z","iopub.execute_input":"2023-03-19T13:53:20.660271Z"},"trusted":true},"execution_count":null,"outputs":[{"execution_count":403,"output_type":"execute_result","data":{"text/plain":"<AxesSubplot:>"},"metadata":{}}]},{"cell_type":"code","source":"# Select columns where the percentage of missing values is greater than zero\nmissing_percentages = (df.isna().sum() * 100) / df.shape[0]\n\n# Add the percentage of missing values in front of each column name\nselected_cols = [f\"{col} ({missing_percentages[col]:.2}%)\" for col in df.columns if missing_percentages[col] > 0]\n\n# Print the selected columns with the percentage of missing values in front\nprint(selected_cols)","metadata":{"id":"ZxrhAMBwaAzS","outputId":"d039b6f3-a8ff-4c26-9dd1-8c9b009d176a","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n\n<a id=\"3\"></a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">3. Data Cleaning and Optimization</p>\n","metadata":{"id":"A8Fl6St5aAzT"}},{"cell_type":"markdown","source":"\n\n<a id=\"3.1\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">3.1 Data Cleaning    </p>\n\n","metadata":{"id":"WoialjKXaAzT"}},{"cell_type":"code","source":"# Dropping unwanted column\ndf = df.drop('Rank', axis=1)","metadata":{"id":"rHCLXBgTaAzU","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Removing NaN values from Year\ndf.dropna(subset=['Year'],inplace=True)\ndf.dropna(subset=['Publisher'],inplace=True)","metadata":{"id":"6sMnc1B5aAzU","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sorted_arr = np.sort(np.unique(df.Year))\nprint(sorted_arr)\n","metadata":{"id":"aPDjmL_VaAzU","outputId":"3d55f9c7-44a9-4360-d416-e87fe5328986","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<div class=\"alert alert-block alert-info\">\n    <span style='font-family:Georgia'>\n        <b>Insight: </b><br>\n        This is an anomoly as the downloaded data is till Year 2017 only. We will remove the row(s) with wrong or null year or we will try to find the real year for those columns.\n    </span>\n</div>\n","metadata":{"id":"MnvlMoHQaAzV"}},{"cell_type":"code","source":"year_data = df['Year']\nprint(\"Max Year Value: \", year_data.max())","metadata":{"id":"xA1H2n2oaAzV","outputId":"9b7b1d4f-3633-43d1-f9c3-7321c227392a","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"max_entry = df.loc[df['Year'].idxmax()]\npd.DataFrame(max_entry).T\n","metadata":{"id":"7LO32WKsaAzW","outputId":"eb6bf2a2-4cde-4f2a-f11a-68fe85fd2a2c","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<p>\n    <span style='font-family:Georgia'>\n        Imagine: Makeup Artist game was launched in 16th April, 2009. Thus we will change 2020 to 2009\n    </span>\n</p>","metadata":{"id":"4Fxu8qu7aAzW"}},{"cell_type":"code","source":"year_data = df['Year']\ndf['Year'] = df['Year'].replace(2020.0, 2009.0)\nprint(\"Max Year Value: \", year_data.max())","metadata":{"id":"zZvmNVxraAzW","outputId":"285cf4ab-f3b1-4507-b346-afe575a3ff6a","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n\n<a id=\"3.2\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">3.2 Optimizing the data    </p>\n\n","metadata":{"id":"fJgv_Z4zaAzX"}},{"cell_type":"code","source":"df.head(1)","metadata":{"id":"TZSzlon4aAzX","outputId":"44514a4d-6316-47a7-e5f7-acd9795ad50c","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"id":"AM-j7URUaAzX","outputId":"34a78e26-a51c-441a-e29a-37311f930dc3","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"for col in df.columns:\n    print(f\"{col} - {len(df[col].unique())}\")\n","metadata":{"id":"i0x1i3gqaAzY","outputId":"1a30c9e3-7f0d-46e9-e942-3a4fe7a2d6f7","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[['Genre','Platform']] = df[['Genre','Platform']].astype('category')\ndf['Year'] = df['Year'].astype('int32')\ndf[['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales']] = df[['NA_Sales','EU_Sales','JP_Sales','Other_Sales','Global_Sales']].astype('float32')\n","metadata":{"id":"HHujjf10aAzY","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n\n\n<a id=\"4\"></a>\n# <p style=\"background-color:skyblue; font-family:newtimeroman; font-size:150%; text-align:center; border-radius: 15px 50px;\">4. Descriptive Analysis</p>\n","metadata":{"id":"mgKeW6hjaAzY"}},{"cell_type":"markdown","source":"\n<a id=\"4.1\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">4.1 Frequency Distribution    </p>","metadata":{"id":"3lM0DzISAsyx"}},{"cell_type":"code","source":"fig = make_subplots(rows=3, cols=2, subplot_titles=('Year', 'NA Frequency', 'EU Frequency', 'JP Frequency', 'Rest of the World', 'Global'))\n\nfig.add_trace(go.Box(x=df['Year'], boxmean=True, name='Year'), row=1, col=1)\nfig.add_trace(go.Box(x=df['NA_Sales'], boxmean=True, name='NA'), row=1, col=2)\nfig.add_trace(go.Box(x=df['EU_Sales'], boxmean=True, name='EU'), row=2, col=1)\nfig.add_trace(go.Box(x=df['JP_Sales'], boxmean=True, name='JP'), row=2, col=2)\nfig.add_trace(go.Box(x=df['Other_Sales'], boxmean=True, name='Other Region'), row=3, col=1)\nfig.add_trace(go.Box(x=df['Global_Sales'], boxmean=True, name='Global'), row=3, col=2)\n\nfig.update_layout(\n    title='Frequency Distribution of Numerical Columns',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,\n)\n\nfig.show()\n","metadata":{"id":"99LlY7UuAsyx","outputId":"ed47d25e-7e66-4fae-e772-6ae2a6ad21ce","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Our Numerical data is Highly skewed in left direction which means positively skewed","metadata":{"id":"-aSCNBHWAsyy"}},{"cell_type":"code","source":"fig = make_subplots(rows=2, cols=2,\n    subplot_titles=(\"North American Sales Histogram(in millions)\", \"North American Sales < 1 millions\",\n                    \"Europe Sales Histogram(in millions)\",\"Europe Sales < 1 millions\"))\n\n# North America\nfig.add_trace(go.Histogram(x=df[\"NA_Sales\"]), row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\n\ndata = df[df[\"NA_Sales\"] < 1]\nfig.add_trace(go.Histogram(x=data[\"NA_Sales\"]), row=1, col=2)\n\n# Europe\nfig.add_trace(go.Histogram(x=df[\"EU_Sales\"]), row=2, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=2, col=1)\n\ndata = df[df[\"EU_Sales\"] < 1]\nfig.add_trace(go.Histogram(x=data[\"EU_Sales\"]), row=2, col=2)\n\n\n# fig.update_layout(title=\"North American & Europe Sales Histogram\", height=800, width=1200)\n\nfig.update_layout(\n    title='North American & Europe Sales Histogram',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\nfig.show()","metadata":{"id":"WoAuIyBgAsyy","outputId":"b09e4d18-adcf-4d3a-c3c5-a625cae1c2ff","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = make_subplots(rows=2, cols=2,\n    subplot_titles=(\"Japan Sales Histogram(in millions)\", \"Japan Sales < 1 millions\",\n                    \"Other Region Histogram(in millions)\",\"Other Region Sales < 1 millions\"))\n# North America\nfig.add_trace(go.Histogram(x=df[\"JP_Sales\"]), row=1, col=1)\n\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\ndata = df[df[\"JP_Sales\"] < 1]\nfig.add_trace(go.Histogram(x=data[\"JP_Sales\"]), row=1, col=2)\n\n\nfig.add_trace(go.Histogram(x=df[\"Other_Sales\"]), row=2, col=1)\n\nfig.update_yaxes(title_text=\"Frequency\", row=2, col=1)\ndata = df[df[\"Other_Sales\"] < 1]\nfig.add_trace(go.Histogram(x=data[\"Other_Sales\"]), row=2, col=2)\n\n\n\nfig.update_layout(\n    title='Japan & Rest of the world Sales Histogram',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\nfig.show()","metadata":{"id":"jd-t4VWPAsyy","outputId":"0819d293-824b-4fb3-a7f6-c93fe51ca7db","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = make_subplots(rows=1, cols=2, subplot_titles=(\"Global Sales Histogram(in millions)\", \"Global Sales < 2 millions\"))\n# North America\nfig.add_trace(go.Histogram(x=df[\"Global_Sales\"]), row=1, col=1)\nfig.update_xaxes(title_text=\"Total Sales (in millions)\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\ndata = df[df[\"Global_Sales\"] < 2]\nfig.add_trace(go.Histogram(x=data[\"Global_Sales\"]), row=1, col=2)\nfig.update_xaxes(title_text=\"Total Sales (in millions)\", row=1, col=2)\n\nfig.update_layout(\n    title='Total Global Sales Histogram',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\nfig.show()\n","metadata":{"id":"ZRcdmPLQAsyy","outputId":"8c0f4d0d-df92-473e-c96f-aae7c5656462","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Publisher Wise frequency\n","metadata":{"id":"hnTYT4pSAsyz"}},{"cell_type":"code","source":"temp = df.groupby('Publisher')['Name'].count().reset_index().sort_values('Name', ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\n\n# Add traces for each category of publisher\nfor num in [5, 10, 50, 100, len(temp)]:\n    fig.add_trace(\n        go.Bar(\n            x=temp['Publisher'][:num],\n            y=temp['Name'][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp['Name'][:num], 'colorscale': 'redor'},\n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in [5, 10, 50, 100, len(temp)]]},\n                      {\"title\": f\"Top {num} Publishers\" if num != len(temp) else \"All Publishers\"}])\n           for num in [5, 10, 50, 100, len(temp)]]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n# Set title and axis range\nfig.update_layout(\n    title='Publisher Wise Video Games',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n# Display the figure\nfig.show()","metadata":{"id":"NQmn3RFCAsyz","outputId":"b4b9d76c-ff70-4cd2-ea12-62c6faf8bf3c","_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-03-19T13:53:34.690376Z","iopub.execute_input":"2023-03-19T13:53:34.690746Z","iopub.status.idle":"2023-03-19T13:53:34.731427Z","shell.execute_reply.started":"2023-03-19T13:53:34.690712Z","shell.execute_reply":"2023-03-19T13:53:34.730109Z"},"trusted":true},"execution_count":434,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"248db483-f99b-4972-8fad-dd1fb3dd36b0\" class=\"plotly-graph-div\" style=\"height:700px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"248db483-f99b-4972-8fad-dd1fb3dd36b0\")) {                    Plotly.newPlot(                        \"248db483-f99b-4972-8fad-dd1fb3dd36b0\",                        [{\"marker\":{\"color\":[1339,966,928,918,823],\"colorscale\":[[0.0,\"rgb(246, 210, 169)\"],[0.16666666666666666,\"rgb(245, 183, 142)\"],[0.3333333333333333,\"rgb(241, 156, 124)\"],[0.5,\"rgb(234, 129, 113)\"],[0.6666666666666666,\"rgb(221, 104, 108)\"],[0.8333333333333334,\"rgb(202, 82, 104)\"],[1.0,\"rgb(177, 63, 100)\"]]},\"name\":\"Top 5\",\"visible\":true,\"x\":[\"Electronic Arts\",\"Activision\",\"Namco Bandai Games\",\"Ubisoft\",\"Konami Digital Entertainment\"],\"y\":[1339,966,928,918,823],\"type\":\"bar\"},{\"marker\":{\"color\":[1339,966,928,918,823,712,696,682,632,412],\"colorscale\":[[0.0,\"rgb(246, 210, 169)\"],[0.16666666666666666,\"rgb(245, 183, 142)\"],[0.3333333333333333,\"rgb(241, 156, 124)\"],[0.5,\"rgb(234, 129, 113)\"],[0.6666666666666666,\"rgb(221, 104, 108)\"],[0.8333333333333334,\"rgb(202, 82, 104)\"],[1.0,\"rgb(177, 63, 100)\"]]},\"name\":\"Top 10\",\"visible\":false,\"x\":[\"Electronic Arts\",\"Activision\",\"Namco Bandai Games\",\"Ubisoft\",\"Konami Digital Entertainment\",\"THQ\",\"Nintendo\",\"Sony Computer Entertainment\",\"Sega\",\"Take-Two Interactive\"],\"y\":[1339,966,928,918,823,712,696,682,632,412],\"type\":\"bar\"},{\"marker\":{\"color\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43],\"colorscale\":[[0.0,\"rgb(246, 210, 169)\"],[0.16666666666666666,\"rgb(245, 183, 142)\"],[0.3333333333333333,\"rgb(241, 156, 124)\"],[0.5,\"rgb(234, 129, 113)\"],[0.6666666666666666,\"rgb(221, 104, 108)\"],[0.8333333333333334,\"rgb(202, 82, 104)\"],[1.0,\"rgb(177, 63, 100)\"]]},\"name\":\"Top 50\",\"visible\":false,\"x\":[\"Electronic Arts\",\"Activision\",\"Namco Bandai Games\",\"Ubisoft\",\"Konami Digital Entertainment\",\"THQ\",\"Nintendo\",\"Sony Computer Entertainment\",\"Sega\",\"Take-Two Interactive\",\"Capcom\",\"Atari\",\"Tecmo Koei\",\"Square Enix\",\"Warner Bros. Interactive Entertainment\",\"Disney Interactive Studios\",\"Eidos Interactive\",\"Midway Games\",\"505 Games\",\"Microsoft Game Studios\",\"Acclaim Entertainment\",\"D3Publisher\",\"Vivendi Games\",\"Codemasters\",\"Idea Factory\",\"Deep Silver\",\"Zoo Digital Publishing\",\"Nippon Ichi Software\",\"Unknown\",\"Majesco Entertainment\",\"LucasArts\",\"Rising Star Games\",\"Hudson Soft\",\"Banpresto\",\"Crave Entertainment\",\"Bethesda Softworks\",\"Atlus\",\"Virgin Interactive\",\"Infogrames\",\"5pb\",\"Ignition Entertainment\",\"Focus Home Interactive\",\"Marvelous Interactive\",\"SquareSoft\",\"Empire Interactive\",\"Kadokawa Shoten\",\"Destineer\",\"GT Interactive\",\"DTP Entertainment\",\"Alchemist\"],\"y\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43],\"type\":\"bar\"},{\"marker\":{\"color\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43,40,39,39,37,37,37,36,36,35,35,33,32,32,32,30,30,30,29,27,27,27,26,26,26,25,25,24,23,23,23,22,22,22,22,21,21,20,20,19,19,19,19,18,18,18,18,18,17,17,17],\"colorscale\":[[0.0,\"rgb(246, 210, 169)\"],[0.16666666666666666,\"rgb(245, 183, 142)\"],[0.3333333333333333,\"rgb(241, 156, 124)\"],[0.5,\"rgb(234, 129, 113)\"],[0.6666666666666666,\"rgb(221, 104, 108)\"],[0.8333333333333334,\"rgb(202, 82, 104)\"],[1.0,\"rgb(177, 63, 100)\"]]},\"name\":\"Top 100\",\"visible\":false,\"x\":[\"Electronic Arts\",\"Activision\",\"Namco Bandai Games\",\"Ubisoft\",\"Konami Digital Entertainment\",\"THQ\",\"Nintendo\",\"Sony Computer Entertainment\",\"Sega\",\"Take-Two Interactive\",\"Capcom\",\"Atari\",\"Tecmo Koei\",\"Square Enix\",\"Warner Bros. Interactive Entertainment\",\"Disney Interactive Studios\",\"Eidos Interactive\",\"Midway Games\",\"505 Games\",\"Microsoft Game Studios\",\"Acclaim Entertainment\",\"D3Publisher\",\"Vivendi Games\",\"Codemasters\",\"Idea Factory\",\"Deep Silver\",\"Zoo Digital Publishing\",\"Nippon Ichi Software\",\"Unknown\",\"Majesco Entertainment\",\"LucasArts\",\"Rising Star Games\",\"Hudson Soft\",\"Banpresto\",\"Crave Entertainment\",\"Bethesda Softworks\",\"Atlus\",\"Virgin Interactive\",\"Infogrames\",\"5pb\",\"Ignition Entertainment\",\"Focus Home Interactive\",\"Marvelous Interactive\",\"SquareSoft\",\"Empire Interactive\",\"Kadokawa Shoten\",\"Destineer\",\"GT Interactive\",\"DTP Entertainment\",\"Alchemist\",\"MTV Games\",\"PQube\",\"Global Star\",\"Takara Tomy\",\"SouthPeak Games\",\"Spike\",\"3DO\",\"TDK Mediactive\",\"Nordic Games\",\"BAM! Entertainment\",\"Zoo Games\",\"Psygnosis\",\"Mindscape\",\"Game Factory\",\"Interplay\",\"Black Bean Games\",\"Enix Corporation\",\"Activision Value\",\"Prototype\",\"FuRyu\",\"Level 5\",\"Little Orbit\",\"Arc System Works\",\"Kalypso Media\",\"Avanquest\",\"Telltale Games\",\"Midas Interactive Entertainment\",\"Jaleco\",\"Aqua Plus\",\"Paradox Interactive\",\"Broccoli\",\"JoWood Productions\",\"Universal Interactive\",\"SNK\",\"Kemco\",\"Oxygen Interactive\",\"ASCII Entertainment\",\"Compile Heart\",\"Taito\",\"Success\",\"Storm City Games\",\"Titus\",\"SNK Playmore\",\"Tomy Corporation\",\"City Interactive\",\"ChunSoft\",\"Zushi Games\",\"Rocket Company\",\"DreamCatcher Interactive\",\"SCi\"],\"y\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43,40,39,39,37,37,37,36,36,35,35,33,32,32,32,30,30,30,29,27,27,27,26,26,26,25,25,24,23,23,23,22,22,22,22,21,21,20,20,19,19,19,19,18,18,18,18,18,17,17,17],\"type\":\"bar\"},{\"marker\":{\"color\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43,40,39,39,37,37,37,36,36,35,35,33,32,32,32,30,30,30,29,27,27,27,26,26,26,25,25,24,23,23,23,22,22,22,22,21,21,20,20,19,19,19,19,18,18,18,18,18,17,17,17,17,17,17,16,16,16,16,16,16,16,16,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,12,12,12,12,12,12,11,11,11,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"colorscale\":[[0.0,\"rgb(246, 210, 169)\"],[0.16666666666666666,\"rgb(245, 183, 142)\"],[0.3333333333333333,\"rgb(241, 156, 124)\"],[0.5,\"rgb(234, 129, 113)\"],[0.6666666666666666,\"rgb(221, 104, 108)\"],[0.8333333333333334,\"rgb(202, 82, 104)\"],[1.0,\"rgb(177, 63, 100)\"]]},\"name\":\"All\",\"visible\":false,\"x\":[\"Electronic Arts\",\"Activision\",\"Namco Bandai Games\",\"Ubisoft\",\"Konami Digital Entertainment\",\"THQ\",\"Nintendo\",\"Sony Computer Entertainment\",\"Sega\",\"Take-Two Interactive\",\"Capcom\",\"Atari\",\"Tecmo Koei\",\"Square Enix\",\"Warner Bros. Interactive Entertainment\",\"Disney Interactive Studios\",\"Eidos Interactive\",\"Midway Games\",\"505 Games\",\"Microsoft Game Studios\",\"Acclaim Entertainment\",\"D3Publisher\",\"Vivendi Games\",\"Codemasters\",\"Idea Factory\",\"Deep Silver\",\"Zoo Digital Publishing\",\"Nippon Ichi Software\",\"Unknown\",\"Majesco Entertainment\",\"LucasArts\",\"Rising Star Games\",\"Hudson Soft\",\"Banpresto\",\"Crave Entertainment\",\"Bethesda Softworks\",\"Atlus\",\"Virgin Interactive\",\"Infogrames\",\"5pb\",\"Ignition Entertainment\",\"Focus Home Interactive\",\"Marvelous Interactive\",\"SquareSoft\",\"Empire Interactive\",\"Kadokawa Shoten\",\"Destineer\",\"GT Interactive\",\"DTP Entertainment\",\"Alchemist\",\"MTV Games\",\"PQube\",\"Global Star\",\"Takara Tomy\",\"SouthPeak Games\",\"Spike\",\"3DO\",\"TDK Mediactive\",\"Nordic Games\",\"BAM! Entertainment\",\"Zoo Games\",\"Psygnosis\",\"Mindscape\",\"Game Factory\",\"Interplay\",\"Black Bean Games\",\"Enix Corporation\",\"Activision Value\",\"Prototype\",\"FuRyu\",\"Level 5\",\"Little Orbit\",\"Arc System Works\",\"Kalypso Media\",\"Avanquest\",\"Telltale Games\",\"Midas Interactive Entertainment\",\"Jaleco\",\"Aqua Plus\",\"Paradox Interactive\",\"Broccoli\",\"JoWood Productions\",\"Universal Interactive\",\"SNK\",\"Kemco\",\"Oxygen Interactive\",\"ASCII Entertainment\",\"Compile Heart\",\"Taito\",\"Success\",\"Storm City Games\",\"Titus\",\"SNK Playmore\",\"Tomy Corporation\",\"City Interactive\",\"ChunSoft\",\"Zushi Games\",\"Rocket Company\",\"DreamCatcher Interactive\",\"SCi\",\"Koch Media\",\"O-Games\",\"Natsume\",\"Mastiff\",\"Falcom Corporation\",\"Imagineer\",\"GSP\",\"Hasbro Interactive\",\"UFO Interactive\",\"Milestone S.r.l.\",\"Takara\",\"Enterbrain\",\"Sony Computer Entertainment Europe\",\"Kadokawa Games\",\"From Software\",\"PopCap Games\",\"Ghostlight\",\"Rondomedia\",\"Ocean\",\"Play It\",\"Playlogic Game Factory\",\"Ubisoft Annecy\",\"Quinrose\",\"989 Studios\",\"CyberFront\",\"Conspiracy Entertainment\",\"System 3 Arcade Software\",\"Acquire\",\"Bigben Interactive\",\"Nobilis\",\"Human Entertainment\",\"Mastertronic\",\"Gust\",\"GungHo\",\"Metro 3D\",\"XS Games\",\"Destination Software, Inc\",\"Mattel Interactive\",\"Marvelous Entertainment\",\"Irem Software Engineering\",\"Yeti\",\"Sammy Corporation\",\"Hudson Entertainment\",\"Popcorn Arcade\",\"Cave\",\"Brash Entertainment\",\"Microids\",\"Scholastic Inc.\",\"Sunsoft\",\"Starfish\",\"Xplosiv\",\"Ackkstudios\",\"Gremlin Interactive Ltd\",\"Victor Interactive\",\"ArtDink\",\"Foreign Media Games\",\"NewKidCo\",\"Gathering of Developers\",\"Avanquest Software\",\"Sting\",\"ASCII Media Works\",\"JVC\",\"Agetec\",\"NEC Interchannel\",\"Genki\",\"Aksys Games\",\"RTL\",\"GameMill Entertainment\",\"MTO\",\"Sony Online Entertainment\",\"Aspyr\",\"Fox Interactive\",\"Tru Blu Entertainment\",\"Asgard\",\"Valcon Games\",\"Telegames\",\"Evolved Games\",\"LEGO Media\",\"Neko Entertainment\",\"BMG Interactive Entertainment\",\"Nihon Falcom Corporation\",\"Nippon Columbia\",\"Hackberry\",\"Gotham Games\",\"Parker Bros.\",\"Big Ben Interactive\",\"Rage Software\",\"Epoch\",\"Reef Entertainment\",\"Seta Corporation\",\"Comfort\",\"Swing! Entertainment\",\"Square\",\"Russel\",\"Benesse\",\"Funbox Media\",\"Astragon\",\"Kaga Create\",\"CDV Software Entertainment\",\"Idea Factory International\",\"DSI Games\",\"Graffiti\",\"Avalon Interactive\",\"Mumbo Jumbo\",\"Screenlife\",\"Blast! Entertainment Ltd\",\"Alternative Software\",\"NCSoft\",\"Paon\",\"Compile\",\"Asylum Entertainment\",\"20th Century Fox Video Games\",\"IE Institute\",\"Coleco\",\"AQ Interactive\",\"Crystal Dynamics\",\"Microprose\",\"Hip Interactive\",\"TDK Core\",\"Nordcurrent\",\"Wanadoo\",\"ESP\",\"Shogakukan\",\"Pinnacle\",\"Time Warner Interactive\",\"The Adventure Company\",\"Media Works\",\"Mojang\",\"Mentor Interactive\",\"bitComposer Games\",\"Happinet\",\"Tommo\",\"dramatic create\",\"KID\",\"Mercury Games\",\"Trion Worlds\",\"Touchstone\",\"Knowledge Adventure\",\"U.S. Gold\",\"7G//AMES\",\"LSP Games\",\"TGL\",\"Laguna\",\"Culture Brain\",\"RedOctane\",\"Xseed Games\",\"Sunrise Interactive\",\"Video System\",\"Interchannel\",\"Encore\",\"Phenomedia\",\"Pioneer LDC\",\"ValuSoft\",\"Gamecock\",\"PlayV\",\"Home Entertainment Suppliers\",\"Global A Entertainment\",\"Excalibur Publishing\",\"Daito\",\"System Soft\",\"Imagic\",\"Maxis\",\"Princess Soft\",\"MC2 Entertainment\",\"Tradewest\",\"Tivola\",\"Mad Catz\",\"Vir2L Studios\",\"Red Storm Entertainment\",\"Tigervision\",\"Mud Duck Productions\",\"P2 Games\",\"Media Rings\",\"Micro Cabin\",\"Yuke's\",\"Minato Station\",\"Myelin Media\",\"NCS\",\"NEC\",\"Yacht Club Games\",\"NovaLogic\",\"Slightly Mad Studios\",\"O3 Entertainment\",\"Telstar\",\"Sony Computer Entertainment America\",\"Valve Software\",\"Slitherine Software\",\"Xicat Interactive\",\"System 3\",\"10TACLE Studios\",\"Focus Multimedia\",\"Insomniac Games\",\"Jorudan\",\"Jester Interactive\",\"Jack of All Games\",\"Creative Core\",\"DHM Interactive\",\"Daedalic\",\"Data Design Interactive\",\"Indie Games\",\"Ascaron Entertainment GmbH\",\"Essential Games\",\"Experience Inc.\",\"Iceberg Interactive\",\"1C Company\",\"Funsta\",\"GN Software\",\"Hect\",\"Asmik Ace Entertainment\",\"Daedalic Entertainment\",\"Aruze Corp\",\"ASC Games\",\"Arika\",\"Agatsuma Entertainment\",\"Accolade\",\"Angel Studios\",\"Licensed 4U\",\"Gakken\",\"imageepoch Inc.\",\"Office Create\",\"Edia\",\"Electronic Arts Victor\",\"Sonnet\",\"Elf\",\"Pack-In-Video\",\"Aerosoft\",\"Yamasa Entertainment\",\"Flashpoint Games\",\"Flight-Plan\",\"Performance Designed Products\",\"Revolution Software\",\"Gamebridge\",\"Funcom\",\"Easy Interactive\",\"Rebellion Developments\",\"Rebellion\",\"Zenrin\",\"G.Rev\",\"Game Life\",\"Gainax Network Systems\",\"Red Orb\",\"Dusenberry Martin Racing\",\"Alawar Entertainment\",\"Arena Entertainment\",\"Asmik Corp\",\"Athena\",\"BPS\",\"Big Fish Games\",\"TopWare Interactive\",\"Blue Byte\",\"CTO SpA\",\"Cloud Imperium Games Corporation\",\"Coconuts Japan\",\"Vatical Entertainment\",\"Vic Tokai\",\"Core Design Ltd.\",\"Dorart\",\"Views\",\"Crimson Cow\",\"Virtual Play Games\",\"HMH Interactive\",\"Syscom\",\"Data Age\",\"Sweets\",\"Alvion\",\"Data East\",\"Datam Polystar\",\"Devolver Digital\",\"Groove Games\",\"responDESIGN\",\"HuneX\",\"Liquid Games\",\"Media Factory\",\"Misawa\",\"Lexicon Entertainment\",\"Nippon Telenet\",\"Nitroplus\",\"Mamba Games\",\"Magix\",\"NetRevo\",\"Milestone S.r.l\",\"Moss\",\"Hamster Corporation\",\"Harmonix Music Systems\",\"Kando Games\",\"The Learning Company\",\"CBS Electronics\",\"BushiRoad\",\"Boost On\",\"Bomb\",\"Bohemia Interactive\",\"Merscom LLC\",\"Kamui\",\"Black Label Games\",\"Cygames\",\"Berkeley\",\"CCP\",\"Tripwire Interactive\",\"Men-A-Vision\",\"Tryfirst\",\"Type-Moon\",\"Axela\",\"UEP Systems\",\"MediaQuest\",\"Interplay Productions\",\"Tetris Online\",\"Culture Publishers\",\"CPG Products\",\"Milestone\",\"Introversion Software\",\"TOHO\",\"TYO\",\"Ivolgamus\",\"T&E Soft\",\"Commseed\",\"CokeM Interactive\",\"Codemasters Online\",\"Takuyo\",\"TalonSoft\",\"Team17 Software\",\"TechnoSoft\",\"Technos Japan Corporation\",\"Just Flight\",\"UIG Entertainment\",\"Inti Creates\",\"KSS\",\"Interworks Unlimited, Inc.\",\"Michaelsoft\",\"Number None\",\"Karin Entertainment\",\"Magical Company\",\"Wizard Video Games\",\"Marvelous Games\",\"Marvel Entertainment\",\"Xing Entertainment\",\"Adeline Software\",\"Activision Blizzard\",\"Lighthouse Interactive\",\"Abylight\",\"Yumedia\",\"ASK\",\"Westwood Studios\",\"989 Sports\",\"49Games\",\"2D Boy\",\"fonfun\",\"iWin\",\"id Software\",\"Locus\",\"inXile Entertainment\",\"mixi, Inc\",\"White Park Bay Software\",\"WayForward Technologies\",\"Kids Station\",\"Kokopeli Digital Studios\",\"Universal Gamex\",\"Ascaron Entertainment\",\"Media Entertainment\",\"King Records\",\"Valve\",\"Aria\",\"Vap\",\"Maximum Family Games\",\"Max Five\",\"Aques\",\"Warp\",\"Kool Kizz\",\"Answer Software\",\"Legacy Interactive\",\"Masque Publishing\",\"Visco\",\"American Softworks\",\"Warashi\",\"Wargaming.net\",\"Altron\",\"Mirai Shounen\",\"Summitsoft\",\"Mitsui\",\"Piacci\",\"Gameloft\",\"GameTek\",\"Playmates\",\"Playmore\",\"Plenty\",\"Pony Canyon\",\"Game Arts\",\"PopTop Software\",\"Hearty Robin\",\"Pow\",\"Nippon Amuse\",\"Gaga\",\"GOA\",\"Quelle\",\"Quest\",\"Hello Games\",\"Quintet\",\"RED Entertainment\",\"Her Interactive\",\"Nichibutsu\",\"Rain Games\",\"General Entertainment\",\"Phoenix Games\",\"New World Computing\",\"Genterprise\",\"On Demand\",\"Ongakukan\",\"Origin Systems\",\"Otomate\",\"Griffin International\",\"Graphsim Entertainment\",\"PM Studios\",\"Grand Prix Games\",\"Pacific Century Cyber Works\",\"Pack In Soft\",\"Havas Interactive\",\"Palcom\",\"Panther Software\",\"Glams\",\"Paon Corporation\",\"Paradox Development\",\"Giza10\",\"Giga\",\"Headup Games\",\"Phantagram\",\"Phantom EFX\",\"Nexon\",\"New\",\"Intergrow\",\"Image Epoch\",\"Sold Out\",\"NDA Productions\",\"Imageworks\",\"Imax\",\"Ecole\",\"Sony Music Entertainment\",\"Mystique\",\"EON Digital Entertainment\",\"EA Games\",\"Mycom\",\"Square EA\",\"DreamWorks Interactive\",\"Interchannel-Holon\",\"Stainless Games\",\"DigiCube\",\"Starpath Corp.\",\"Detn8 Games\",\"Strategy First\",\"Monte Christo Multimedia\",\"HAL Laboratory\",\"Sunflowers\",\"Societa\",\"Elite\",\"FunSoft\",\"Simon & Schuster Interactive\",\"Fuji\",\"Revolution (Japan)\",\"FuRyu Corporation\",\"Riverhillsoft\",\"Fortyfive\",\"ITT Family Games\",\"Naxat Soft\",\"SCS Software\",\"Navarre Corp\",\"Fields\",\"Extreme Entertainment Group\",\"SPS\",\"SSI\",\"Illusion Softworks\",\"Saurus\",\"Evolution Games\",\"Imadio\",\"Ertain\",\"Epic Games\",\"Seventh Chord\",\"Enjoy Gaming ltd.\",\"MLB.com\"],\"y\":[1339,966,928,918,823,712,696,682,632,412,376,347,338,231,217,214,196,196,192,189,184,183,161,150,128,121,104,104,100,90,89,85,81,73,71,69,67,62,61,61,59,56,56,52,51,50,45,45,44,43,40,39,39,37,37,37,36,36,35,35,33,32,32,32,30,30,30,29,27,27,27,26,26,26,25,25,24,23,23,23,22,22,22,22,21,21,20,20,19,19,19,19,18,18,18,18,18,17,17,17,17,17,17,16,16,16,16,16,16,16,16,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,12,12,12,12,12,12,11,11,11,10,10,10,10,10,10,10,10,10,9,9,9,9,9,9,9,9,9,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"updatemenus\":[{\"active\":0,\"buttons\":[{\"args\":[{\"visible\":[true,false,false,false,false]},{\"title\":\"Top 5 Publishers\"}],\"label\":\"Top 5\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,true,false,false,false]},{\"title\":\"Top 10 Publishers\"}],\"label\":\"Top 10\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,true,false,false]},{\"title\":\"Top 50 Publishers\"}],\"label\":\"Top 50\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,true,false]},{\"title\":\"Top 100 Publishers\"}],\"label\":\"Top 100\",\"method\":\"update\"},{\"args\":[{\"visible\":[false,false,false,false,true]},{\"title\":\"All Publishers\"}],\"label\":\"All\",\"method\":\"update\"}],\"direction\":\"right\",\"type\":\"buttons\",\"x\":0.57,\"y\":1.2}],\"title\":{\"text\":\"Publisher Wise Video Games\"},\"paper_bgcolor\":\"beige\",\"plot_bgcolor\":\"beige\",\"showlegend\":false,\"height\":700},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('248db483-f99b-4972-8fad-dd1fb3dd36b0');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Genre Wise Frquency\n","metadata":{"id":"ZU2pC2zvAsyz"}},{"cell_type":"code","source":"temp = df.groupby('Genre')['Name'].count().reset_index().sort_values('Name', ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\n\n# Add traces for each category of publisher\nfor num in [3,5, 10,len(temp)]:\n    fig.add_trace(\n        go.Bar(\n            x=temp['Genre'][:num],\n            y=temp['Name'][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp['Name'][:num], 'colorscale': 'redor'},\n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in [3,5, 10,len(temp)]]},\n                      {\"title\": f\"Top {num} Genre\" if num != len(temp) else \"All Genre\"}])\n           for num in [3,5, 10, len(temp)]]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n# Set title and axis range\nfig.update_layout(\n    title='Genre-Wise Video Games Frequency',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\n# Display the figure\nfig.show()","metadata":{"id":"G2wujfvGAsy0","outputId":"a46372be-d043-4f32-9405-a92c440cbfd1","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Platform wise frequency","metadata":{"id":"qX6rvmk0Asy0"}},{"cell_type":"code","source":"temp = df.groupby('Platform')['Name'].count().reset_index().sort_values('Name', ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\nlist = [5,10,20,len(temp)]\n\n# Add traces for each category of publisher\nfor num in list:\n    fig.add_trace(\n        go.Bar(\n            x=temp['Platform'][:num],\n            y=temp['Name'][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp['Name'][:num], 'colorscale': 'redor'},\n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in list]},\n                      {\"title\": f\"Top {num} Platform\" if num != len(temp) else \"All Platform\"}])\n           for num in list]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n# Set title and axis range\nfig.update_layout(\n    title='Platform-Wise Video Games Frequency',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\n# Display the figure\nfig.show()","metadata":{"id":"d_6rgjrzAsy0","outputId":"deb3ff57-34a7-4100-f677-f4c0b14d4212","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<a id=\"4.2\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">4.2 Central Tendency   </p>","metadata":{"id":"NZxbJsHsAsy1"}},{"cell_type":"code","source":"df_combined = pd.DataFrame({\n\"Mean\": [df[f\"{col}_Sales\"].mean() for col in [\"NA\", \"EU\", \"JP\", \"Other\", \"Global\"]],\n\"Median\": [df[f\"{col}_Sales\"].median() for col in [\"NA\", \"EU\", \"JP\", \"Other\", \"Global\"]],\n\"Mode\": [df[f\"{col}_Sales\"].mode()[0] for col in [\"NA\", \"EU\", \"JP\", \"Other\", \"Global\"]]\n}, index=[\"NA_Sales\", \"EU_Sales\", \"JP_Sales\", \"Other_Sales\", \"Global_Sales\"])\ndf_combined","metadata":{"id":"zwc5NSW3Asy1","outputId":"471b269a-346b-4a9b-c5e0-10aa0e67c8b0","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Mean, Median and Mode for Sale columns. \nMean is ranging from 48k to 265k for regions and 540k globally\nMedian is ranging from 0 to 80k. \nMode is 0 for all regions as most frquent value in the data is 0.\n\n\n* The reason for low ranging sales could be that over the years only few games did well and most games failed in terms of revenue generation.\n* There could be some disprency in the data but its just the hypothesis.\n","metadata":{"id":"CMKGuQKlAsy1"}},{"cell_type":"markdown","source":"\n\n<a id=\"4.3\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">4.3 Separating Measures   </p>","metadata":{"id":"HN-0FiE6Asy1"}},{"cell_type":"code","source":"df.loc[:, ['NA_Sales', 'EU_Sales','JP_Sales','Other_Sales', 'Global_Sales']].describe().iloc[3:8]\n","metadata":{"id":"EEh8DGO2Asy2","outputId":"bbb39818-8820-4db5-ea33-c8c4eb73e9f4","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"* Quarantile range for NA is 0 to 240k and EU is 0 to 110k\n* For JP and rest of the world it is 0 to 40k\n* But Globally the Q range is 60K to 480k","metadata":{"id":"SzGyfaxvAsy2"}},{"cell_type":"markdown","source":"\n<a id=\"4.4\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">4.4 Dispersion Measures   </p>","metadata":{"id":"_UOB_ZvzAsy2"}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import median_abs_deviation\n\nsales = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']]\n\nvariance = sales.var().to_frame().T.rename(index={0: 'Variance'})\nstd = sales.std().to_frame().T.rename(index={0: 'Standard Deviation'})\nmad_mean = sales.mad().to_frame().T.rename(index={0: 'Mean Absolute Deviation'})\nmad = sales.apply(median_abs_deviation).to_frame().T.rename(index={0: 'Median Absolute Deviation'})\n\ndf_dispersion = pd.concat([variance, std, mad_mean, mad])\ndf_dispersion = df_dispersion.rename_axis('Dispersion Metrics')\n\ndf_dispersion","metadata":{"id":"M-bSq12fAsy2","outputId":"793723a5-8526-443e-cf1a-b2290f9d0dd9","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# <font color='#30b9e3'> 5. Exploratory Data Analysis:</font>\n<a id=\"5.\"></a>\n","metadata":{"id":"4lm8iPp_Asy3"}},{"cell_type":"markdown","source":"<a id=\"5.1\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">5.1 Publisher-Wise   </p>","metadata":{"id":"CJP88JzGAsy3"}},{"cell_type":"code","source":"x = 'Publisher'\ny = 'Global_Sales'\ntemp = df.groupby(x)[y].sum().reset_index().sort_values(y, ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\nlist = [5,10,20,len(temp)]\n\n# Add traces for each category of publisher\nfor num in list:\n    fig.add_trace(\n        go.Bar(\n            x=temp[x][:num],\n            y=temp[y][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp[y][:num], 'colorscale': 'agsunset'},\n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in list]},\n                      {\"title\": f\"All time Top {num} Publisher\" if num != len(temp) else \"All Publisher\"}])\n           for num in list]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n##Set title and axis range\nfig.update_layout(\n    title='Publisher-Wise All time Global Sales(in millions)',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\n# Display the figure\nfig.show()","metadata":{"id":"UT-MP6PCAsy3","outputId":"c0582220-3fe6-41d2-f1b4-85df33bf897f","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Top 5 Publishers for each region\nregion_sales = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\nregion_names = ['North America', 'Europe', 'Japan', 'Other Region', 'Global']\ntop_publishers = []\n\nfor sales in region_sales:\n    sales_table = df.pivot_table(sales, columns='Publisher', aggfunc='sum').T\n    top_publishers.append(sales_table.sort_values(by=sales, ascending=False).iloc[0:5])\n\n# Create figure\nfig = go.Figure()\n\n# Add traces\nfor i, sales in enumerate(region_sales):\n    fig.add_trace(\n        go.Bar(y=top_publishers[i][sales],\n               x=top_publishers[i].index,\n               name=region_names[i],\n               marker={'color': temp[y][:num], 'colorscale': 'haline'},\n               visible=(i == 0)\n              )\n    )\n\n# Update menu\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type=\"buttons\",\n            direction=\"right\",\n            active=0,\n            x=0.75,\n            y=1.2,\n            buttons=[\n                dict(label=region_names[i],\n                     method=\"update\",\n                     args=[{\"visible\": [i == j for j in range(len(region_sales))]},\n                           {\"title\": f\"Top 5 Publishers for {region_names[i]}\"}]\n                    ) for i in range(len(region_sales))\n            ]\n        )\n    ]\n)\n\nlayout = go.Layout(\n    barmode='stack',\n    title='Genre Counts According to Publisher',\n    xaxis=dict(title='Publisher'),\n    yaxis=dict(title='Revenue'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\n\nfig.update_layout(layout)\nfig.show()\n","metadata":{"id":"ktxOQiJ-Asy4","outputId":"125ea750-556d-45ce-c774-4cb28af9bdea","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"5.2\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">5.2 Platform Wise   </p>","metadata":{"id":"xWgVm6iGM0KV"}},{"cell_type":"code","source":"x = 'Platform'\ny = 'Global_Sales'\ntemp = df.groupby(x)[y].sum().reset_index().sort_values(y, ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\nlist = [5,10,20,len(temp)]\n\n# Add traces for each category of publisher\nfor num in list:\n    fig.add_trace(\n        go.Bar(\n            x=temp[x][:num],\n            y=temp[y][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp[y][:num], 'colorscale': 'agsunset'},                     \n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in list]},\n                      {\"title\": f\"All time Top {num} Platform in Revenue(in millions)\" if num != len(temp) else \"All Platform in Revenue\"}])\n           for num in list]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n# Set title and axis range\nfig.update_layout(\n    title='Platform-Wise All time Global Sales(in millions)',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\n# Display the figure\nfig.show()","metadata":{"id":"U8kRkLeIAsy3","outputId":"270f54c5-272b-4488-88c1-22dd7b696a92","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import plotly.graph_objs as go\n\n# create a list of genres\ngenres = ['Action', 'Sports', 'Misc', 'Role-Playing', 'Shooter', 'Adventure',\n          'Racing', 'Platform', 'Simulation', 'Fighting', 'Strategy', 'Puzzle']\n\n# create a list of colors\ncolors = ['rgb(165,0,38)', 'rgb(215,48,39)', 'rgb(244,109,67)', 'rgb(253,174,97)', 'rgb(254,224,144)', \n          'rgb(170,253,87)', 'rgb(171,217,233)', 'rgb(116,173,209)', 'rgb(69,117,180)', 'rgb(49,54,149)', \n          'rgb(10,77,131)', 'rgb(1,15,139)']\n\n# create a list of traces\ntraces = []\nfor i, genre in enumerate(genres):\n    x = df[df.Genre == genre].Platform\n    trace = go.Histogram(\n        x=x,\n        opacity=0.75,\n        name=genre,\n        marker=dict(color=colors[i])\n    )\n    traces.append(trace)\n\n# create the layout\nlayout = go.Layout(\n    barmode='stack',\n    title='Genre Counts According to Platform',\n    xaxis=dict(title='Platform'),\n    yaxis=dict(title='Count'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\n\n# create the figure\nfig = go.Figure(data=traces, layout=layout)\n\n# show the figure\nfig.show()\n","metadata":{"id":"J7WMZ6YXAsy4","outputId":"17d2cf05-fe42-459e-ef68-acda90f5aa5c","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n<a id=\"5.3\"></a>\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">5.3 Genre Wise   </p>\n","metadata":{"id":"ZsZX-4xQKlFI"}},{"cell_type":"code","source":"genre_s = ['Action', 'Adventure', 'Fighting', 'Misc', 'Platform', 'Puzzle', \n           'Racing', 'Role-Playing', 'Shooter', 'Simulation', 'Sports', 'Strategy']\ngenre = df['Genre'].unique()\ngenre_s = sorted(genre)\ngenre_wise_game = df.groupby(['Genre','Name'])['Global_Sales'].sum().reset_index().sort_values(['Genre','Global_Sales'],ascending = (True,False))\n\n\nfig = go.Figure()\n\nfor i, genre in enumerate(genre_s):\n    temp = genre_wise_game[genre_wise_game['Genre'] == genre].iloc[:5]\n    fig.add_trace(go.Bar(x=temp['Name'], y=temp['Global_Sales'], name=genre, \n                         marker={'color': temp[y][:num], 'colorscale': 'magenta'}, \n                         visible=(i==0)))\n\nfig.update_layout(\n    updatemenus=[dict(\n        active=0,\n        buttons=[dict(label=genre, method=\"update\", \n                       args=[{\"visible\": [j==i for j in range(len(genre_s))]}, \n                             {\"title\": f\"Top 5 Games in {genre} Genre\"}]) \n                for i, genre in enumerate(genre_s)]\n    )]\n)\nlayout = go.Layout(\n    title='Top grossing games in individual Genre',\n    xaxis=dict(title='Games'),\n    yaxis=dict(title='Revenue'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\n\nfig.update_layout(layout)\nfig.show()\n","metadata":{"id":"KjoV3graAsy4","outputId":"1743ec5b-16f3-46a2-c843-180833fa51fc","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = 'Genre'\ny = 'Global_Sales'\ntemp = df.groupby(x)[y].sum().reset_index().sort_values(y, ascending=False)\n\n# Initialize the figure\nfig = go.Figure()\nlist = [3,5,10,len(temp)]\n\n# Add traces for each category of publisher\nfor num in list:\n    fig.add_trace(\n        go.Bar(\n            x=temp[x][:num],\n            y=temp[y][:num],\n            name=f\"Top {num}\" if num != len(temp) else \"All\",\n            marker={'color': temp[y][:num], 'colorscale': 'agsunset'},\n            visible=num == 5,\n        )\n    )\n\n# Add a button to toggle between traces\nbuttons = [dict(label=f\"Top {num}\" if num != len(temp) else \"All\",\n                method=\"update\",\n                args=[{\"visible\": [num == n for n in list]},\n                      {\"title\": f\"Top {num} Genre\" if num != len(temp) else \"All Genre\"}])\n           for num in list]\n\nfig.update_layout(updatemenus=[dict(type=\"buttons\",\n                                    direction=\"right\",\n                                    active=0,\n                                    x=0.57,\n                                    y=1.2,\n                                    buttons=buttons)])\n\n##Set title and axis range\nfig.update_layout(\n    title='Genre All time Global Sales(in millions)',\n    paper_bgcolor='beige',\n    plot_bgcolor='beige',\n    showlegend=False,height=700\n)\n\n# Display the figure\nfig.show()","metadata":{"id":"ybvJgZauAsy3","outputId":"f0978612-35bd-4f24-8c46-1acd16ef7146","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Group the data by genre and sum the sales by region\nsales_by_genre = df.groupby('Genre').sum()[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]\n\n# Define custom colors for each region\ncolors = ['rgb(244,109,67)', 'rgb(254,224,144)', 'rgb(85, 194, 110)',  'rgb(96, 156, 235)']\n\n# Create a stacked bar chart of sales by region and genre\nfig = go.Figure()\nfor i, region in enumerate(['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']):\n    fig.add_trace(go.Bar(\n        x=sales_by_genre[region],\n        y=sales_by_genre.index,\n        name=region,\n        orientation='h',\n        marker_color = colors[i]\n    ))\n\n# Add the custom layout\nlayout = go.Layout(\n    barmode='stack',\n    title='Genre Wise Game Sales by Region',\n    xaxis=dict(title='Sales in $M'),\n    yaxis=dict(title='Genre'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\nfig.update_layout(layout)\nfig.show()\n","metadata":{"id":"N6TZDsm3Asy5","outputId":"b7db132b-b09c-4ca1-e72c-af556ac14ca6","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"\n\n<a id=\"5.4\"></a>\n\n\n# <p style=\"background-color:orange; font-family:newtimeroman; font-size:100%; text-align:center; border-radius: 100px 100px;\">5.4 Region Wise   </p>\n","metadata":{"id":"NS5Egmp4McoW"}},{"cell_type":"code","source":"region = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']\ntemp = df.groupby('Year').sum()[region].reset_index()\nfig = go.Figure()\n\nfor region in region:\n    fig.add_trace(go.Scatter(\n        x=temp['Year'], \n        y=temp[region], \n        mode='lines',\n        name=region,\n    ))\n\n# fig.update_xaxes(type='category')\nlayout = go.Layout(\n    title=\"Total sales per year by region (Millions)\",\n    xaxis=dict(title='Sales in $M'),\n    yaxis=dict(title='Genre'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\nfig.update_layout(layout)\nfig.show()\n","metadata":{"id":"s0R__7uXAsy6","outputId":"458e5a48-9de4-47ae-df50-c9bba322ad66","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"region = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']\ntemp = df.groupby('Genre').sum()[region]\nfig = px.imshow(temp.T)\nfig.update_layout(title=\"Heat Map of revenue by genre and region (Millions)\")\nlayout = go.Layout(\n    title=\"Total sales per year by region (Millions)\",\n    yaxis=dict(title='Region'),\n    paper_bgcolor='beige',\n    plot_bgcolor='beige'\n)\nfig.update_layout(layout)\nfig.show()","metadata":{"id":"HiADGbqaAsy7","outputId":"ce71a34f-f2d1-495a-94d9-d287ecc7c32e","_kg_hide-input":true,"trusted":true},"execution_count":null,"outputs":[]}]}
